// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __delta_plus_LUT_debkb_H__
#define __delta_plus_LUT_debkb_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct delta_plus_LUT_debkb_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 5;
  static const unsigned AddressRange = 1024;
  static const unsigned AddressWidth = 10;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(delta_plus_LUT_debkb_ram) {
        for (unsigned i = 0; i < 44 ; i = i + 1) {
            ram[i] = "0b10001";
        }
        for (unsigned i = 44; i < 102 ; i = i + 1) {
            ram[i] = "0b10000";
        }
        for (unsigned i = 102; i < 161 ; i = i + 1) {
            ram[i] = "0b01111";
        }
        for (unsigned i = 161; i < 219 ; i = i + 1) {
            ram[i] = "0b01110";
        }
        for (unsigned i = 219; i < 277 ; i = i + 1) {
            ram[i] = "0b01101";
        }
        for (unsigned i = 277; i < 335 ; i = i + 1) {
            ram[i] = "0b01100";
        }
        for (unsigned i = 335; i < 393 ; i = i + 1) {
            ram[i] = "0b01011";
        }
        for (unsigned i = 393; i < 451 ; i = i + 1) {
            ram[i] = "0b01010";
        }
        for (unsigned i = 451; i < 509 ; i = i + 1) {
            ram[i] = "0b01001";
        }
        for (unsigned i = 509; i < 567 ; i = i + 1) {
            ram[i] = "0b01000";
        }
        for (unsigned i = 567; i < 624 ; i = i + 1) {
            ram[i] = "0b00111";
        }
        for (unsigned i = 624; i < 681 ; i = i + 1) {
            ram[i] = "0b00110";
        }
        for (unsigned i = 681; i < 739 ; i = i + 1) {
            ram[i] = "0b00101";
        }
        for (unsigned i = 739; i < 796 ; i = i + 1) {
            ram[i] = "0b00100";
        }
        for (unsigned i = 796; i < 853 ; i = i + 1) {
            ram[i] = "0b00011";
        }
        for (unsigned i = 853; i < 910 ; i = i + 1) {
            ram[i] = "0b00010";
        }
        for (unsigned i = 910; i < 967 ; i = i + 1) {
            ram[i] = "0b00001";
        }
        for (unsigned i = 967; i < 1024 ; i = i + 1) {
            ram[i] = "0b00000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(delta_plus_LUT_debkb) {


static const unsigned DataWidth = 5;
static const unsigned AddressRange = 1024;
static const unsigned AddressWidth = 10;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


delta_plus_LUT_debkb_ram* meminst;


SC_CTOR(delta_plus_LUT_debkb) {
meminst = new delta_plus_LUT_debkb_ram("delta_plus_LUT_debkb_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~delta_plus_LUT_debkb() {
    delete meminst;
}


};//endmodule
#endif
