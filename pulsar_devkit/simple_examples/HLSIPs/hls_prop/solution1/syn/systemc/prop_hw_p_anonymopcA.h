// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __prop_hw_p_anonymopcA_H__
#define __prop_hw_p_anonymopcA_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct prop_hw_p_anonymopcA_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 19;
  static const unsigned AddressRange = 27;
  static const unsigned AddressWidth = 5;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(prop_hw_p_anonymopcA_ram) {
        ram[0] = "0b1111111011000010010";
        ram[1] = "0b0000011000110100101";
        ram[2] = "0b0000110110100111000";
        ram[3] = "0b0001010100011001010";
        ram[4] = "0b0001110010001011101";
        ram[5] = "0b0010001111111110000";
        ram[6] = "0b0010101101110000011";
        ram[7] = "0b0011001011100010110";
        ram[8] = "0b0011101001010101001";
        ram[9] = "0b0100000111000111100";
        ram[10] = "0b0100100100111001111";
        ram[11] = "0b0101000010101100010";
        ram[12] = "0b0101100000011110101";
        ram[13] = "0b0101111110010001000";
        ram[14] = "0b1001110111110011100";
        ram[15] = "0b1010010101100101111";
        ram[16] = "0b1010110011011000010";
        ram[17] = "0b1011010001001010100";
        ram[18] = "0b1011101110111100111";
        ram[19] = "0b1100001100101111010";
        ram[20] = "0b1100101010100001101";
        ram[21] = "0b1101001000010100000";
        ram[22] = "0b1101100110000110011";
        ram[23] = "0b1110000011111000110";
        ram[24] = "0b1110100001101011001";
        ram[25] = "0b1110111111011101100";
        ram[26] = "0b1111011101001111111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(prop_hw_p_anonymopcA) {


static const unsigned DataWidth = 19;
static const unsigned AddressRange = 27;
static const unsigned AddressWidth = 5;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


prop_hw_p_anonymopcA_ram* meminst;


SC_CTOR(prop_hw_p_anonymopcA) {
meminst = new prop_hw_p_anonymopcA_ram("prop_hw_p_anonymopcA_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~prop_hw_p_anonymopcA() {
    delete meminst;
}


};//endmodule
#endif
