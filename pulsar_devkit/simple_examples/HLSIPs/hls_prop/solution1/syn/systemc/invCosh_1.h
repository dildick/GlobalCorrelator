// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _invCosh_1_HH_
#define _invCosh_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "prop_hw_mul_mul_1ncg.h"
#include "invCosh_1_cosh_tamb6.h"

namespace ap_rtl {

struct invCosh_1 : public sc_module {
    // Port declarations 8
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<12> > data_V_read;
    sc_out< sc_lv<11> > ap_return;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    invCosh_1(sc_module_name name);
    SC_HAS_PROCESS(invCosh_1);

    ~invCosh_1();

    sc_trace_file* mVcdFile;

    invCosh_1_cosh_tamb6* cosh_table7_U;
    prop_hw_mul_mul_1ncg<1,3,13,11,24>* prop_hw_mul_mul_1ncg_U22;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_lv<1> > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_lv<13> > cosh_table7_address0;
    sc_signal< sc_logic > cosh_table7_ce0;
    sc_signal< sc_lv<11> > cosh_table7_q0;
    sc_signal< sc_lv<11> > tmp_230_reg_137;
    sc_signal< sc_lv<12> > r_V_fu_80_p2;
    sc_signal< sc_lv<12> > r_V_reg_142;
    sc_signal< sc_lv<1> > icmp_fu_96_p2;
    sc_signal< sc_lv<1> > icmp_reg_147;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter4_icmp_reg_147;
    sc_signal< sc_lv<64> > tmp_192_fu_113_p1;
    sc_signal< sc_lv<11> > tmp_fu_60_p1;
    sc_signal< sc_lv<24> > grp_fu_125_p2;
    sc_signal< sc_lv<12> > tmp_cast_cast_fu_77_p1;
    sc_signal< sc_lv<2> > tmp_232_fu_86_p4;
    sc_signal< sc_lv<15> > tmp_231_fu_102_p3;
    sc_signal< sc_lv<16> > tmp_s_fu_109_p1;
    sc_signal< sc_lv<13> > grp_fu_125_p0;
    sc_signal< sc_lv<11> > grp_fu_125_p1;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_pipeline_idle_pp0;
    sc_signal< sc_lv<24> > grp_fu_125_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<12> ap_const_lv12_400;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<11> ap_const_lv11_400;
    static const sc_lv<24> ap_const_lv24_AAB;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_done();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_pipeline_idle_pp0();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_cosh_table7_address0();
    void thread_cosh_table7_ce0();
    void thread_grp_fu_125_p0();
    void thread_grp_fu_125_p1();
    void thread_grp_fu_125_p10();
    void thread_icmp_fu_96_p2();
    void thread_r_V_fu_80_p2();
    void thread_tmp_192_fu_113_p1();
    void thread_tmp_231_fu_102_p3();
    void thread_tmp_232_fu_86_p4();
    void thread_tmp_cast_cast_fu_77_p1();
    void thread_tmp_fu_60_p1();
    void thread_tmp_s_fu_109_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
