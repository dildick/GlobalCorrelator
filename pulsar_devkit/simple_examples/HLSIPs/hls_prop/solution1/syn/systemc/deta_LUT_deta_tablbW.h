// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __deta_LUT_deta_tablbW_H__
#define __deta_LUT_deta_tablbW_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct deta_LUT_deta_tablbW_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 5;
  static const unsigned AddressRange = 1024;
  static const unsigned AddressWidth = 10;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(deta_LUT_deta_tablbW_ram) {
        for (unsigned i = 0; i < 34 ; i = i + 1) {
            ram[i] = "0b11011";
        }
        for (unsigned i = 34; i < 70 ; i = i + 1) {
            ram[i] = "0b11010";
        }
        for (unsigned i = 70; i < 107 ; i = i + 1) {
            ram[i] = "0b11001";
        }
        for (unsigned i = 107; i < 144 ; i = i + 1) {
            ram[i] = "0b11000";
        }
        for (unsigned i = 144; i < 180 ; i = i + 1) {
            ram[i] = "0b10111";
        }
        for (unsigned i = 180; i < 217 ; i = i + 1) {
            ram[i] = "0b10110";
        }
        for (unsigned i = 217; i < 254 ; i = i + 1) {
            ram[i] = "0b10101";
        }
        for (unsigned i = 254; i < 290 ; i = i + 1) {
            ram[i] = "0b10100";
        }
        for (unsigned i = 290; i < 327 ; i = i + 1) {
            ram[i] = "0b10011";
        }
        for (unsigned i = 327; i < 364 ; i = i + 1) {
            ram[i] = "0b10010";
        }
        for (unsigned i = 364; i < 400 ; i = i + 1) {
            ram[i] = "0b10001";
        }
        for (unsigned i = 400; i < 437 ; i = i + 1) {
            ram[i] = "0b10000";
        }
        for (unsigned i = 437; i < 474 ; i = i + 1) {
            ram[i] = "0b01111";
        }
        for (unsigned i = 474; i < 510 ; i = i + 1) {
            ram[i] = "0b01110";
        }
        for (unsigned i = 510; i < 547 ; i = i + 1) {
            ram[i] = "0b01101";
        }
        for (unsigned i = 547; i < 584 ; i = i + 1) {
            ram[i] = "0b01100";
        }
        for (unsigned i = 584; i < 620 ; i = i + 1) {
            ram[i] = "0b01011";
        }
        for (unsigned i = 620; i < 657 ; i = i + 1) {
            ram[i] = "0b01010";
        }
        for (unsigned i = 657; i < 694 ; i = i + 1) {
            ram[i] = "0b01001";
        }
        for (unsigned i = 694; i < 730 ; i = i + 1) {
            ram[i] = "0b01000";
        }
        for (unsigned i = 730; i < 767 ; i = i + 1) {
            ram[i] = "0b00111";
        }
        for (unsigned i = 767; i < 804 ; i = i + 1) {
            ram[i] = "0b00110";
        }
        for (unsigned i = 804; i < 840 ; i = i + 1) {
            ram[i] = "0b00101";
        }
        for (unsigned i = 840; i < 877 ; i = i + 1) {
            ram[i] = "0b00100";
        }
        for (unsigned i = 877; i < 914 ; i = i + 1) {
            ram[i] = "0b00011";
        }
        for (unsigned i = 914; i < 950 ; i = i + 1) {
            ram[i] = "0b00010";
        }
        for (unsigned i = 950; i < 987 ; i = i + 1) {
            ram[i] = "0b00001";
        }
        for (unsigned i = 987; i < 1024 ; i = i + 1) {
            ram[i] = "0b00000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(deta_LUT_deta_tablbW) {


static const unsigned DataWidth = 5;
static const unsigned AddressRange = 1024;
static const unsigned AddressWidth = 10;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


deta_LUT_deta_tablbW_ram* meminst;


SC_CTOR(deta_LUT_deta_tablbW) {
meminst = new deta_LUT_deta_tablbW_ram("deta_LUT_deta_tablbW_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~deta_LUT_deta_tablbW() {
    delete meminst;
}


};//endmodule
#endif
