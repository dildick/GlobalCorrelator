// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _tanh_LUT_HH_
#define _tanh_LUT_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "prop_hw_mul_mul_1kbM.h"
#include "tanh_LUT_tanh_tabjbC.h"

namespace ap_rtl {

struct tanh_LUT : public sc_module {
    // Port declarations 8
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<13> > data_V_read;
    sc_out< sc_lv<10> > ap_return;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    tanh_LUT(sc_module_name name);
    SC_HAS_PROCESS(tanh_LUT);

    ~tanh_LUT();

    sc_trace_file* mVcdFile;

    tanh_LUT_tanh_tabjbC* tanh_table2_U;
    prop_hw_mul_mul_1kbM<1,3,16,13,29>* prop_hw_mul_mul_1kbM_U16;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_lv<1> > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_lv<13> > tanh_table2_address0;
    sc_signal< sc_logic > tanh_table2_ce0;
    sc_signal< sc_lv<10> > tanh_table2_q0;
    sc_signal< sc_lv<1> > tmp_6_reg_234;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter1_tmp_6_reg_234;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter2_tmp_6_reg_234;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter3_tmp_6_reg_234;
    sc_signal< sc_lv<28> > tmp_1_fu_84_p1;
    sc_signal< sc_lv<28> > tmp_1_reg_240;
    sc_signal< sc_lv<13> > tmp_8_reg_245;
    sc_signal< sc_lv<13> > ap_pipeline_reg_pp0_iter3_tmp_8_reg_245;
    sc_signal< sc_lv<12> > tmp_7_reg_250;
    sc_signal< sc_lv<13> > r_V_fu_145_p2;
    sc_signal< sc_lv<13> > r_V_reg_255;
    sc_signal< sc_lv<1> > tmp_12_reg_260;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter5_tmp_12_reg_260;
    sc_signal< sc_lv<3> > tmp_13_reg_266;
    sc_signal< sc_lv<1> > icmp_fu_180_p2;
    sc_signal< sc_lv<1> > icmp_reg_271;
    sc_signal< sc_lv<64> > tmp_3_fu_185_p1;
    sc_signal< sc_lv<29> > grp_fu_221_p2;
    sc_signal< sc_lv<28> > neg_mul_fu_96_p2;
    sc_signal< sc_lv<15> > tmp_fu_111_p1;
    sc_signal< sc_lv<15> > tmp_5_fu_114_p1;
    sc_signal< sc_lv<15> > p_v_fu_117_p3;
    sc_signal< sc_lv<13> > tmp_10_fu_124_p1;
    sc_signal< sc_lv<13> > neg_ti_fu_128_p2;
    sc_signal< sc_lv<13> > tmp_11_fu_134_p1;
    sc_signal< sc_lv<13> > tmp_9_fu_138_p3;
    sc_signal< sc_lv<16> > tmp_2_fu_169_p3;
    sc_signal< sc_lv<32> > index_fu_176_p1;
    sc_signal< sc_lv<1> > sel_tmp1_fu_190_p2;
    sc_signal< sc_lv<1> > sel_tmp2_fu_195_p2;
    sc_signal< sc_lv<1> > tmp_4_fu_208_p2;
    sc_signal< sc_lv<10> > sel_tmp_cast_fu_200_p3;
    sc_signal< sc_lv<16> > grp_fu_221_p0;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_pipeline_idle_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_1C;
    static const sc_lv<28> ap_const_lv28_0;
    static const sc_lv<32> ap_const_lv32_1B;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_lv<13> ap_const_lv13_400;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<10> ap_const_lv10_3FA;
    static const sc_lv<29> ap_const_lv29_5556;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_done();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_pipeline_idle_pp0();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_grp_fu_221_p0();
    void thread_icmp_fu_180_p2();
    void thread_index_fu_176_p1();
    void thread_neg_mul_fu_96_p2();
    void thread_neg_ti_fu_128_p2();
    void thread_p_v_fu_117_p3();
    void thread_r_V_fu_145_p2();
    void thread_sel_tmp1_fu_190_p2();
    void thread_sel_tmp2_fu_195_p2();
    void thread_sel_tmp_cast_fu_200_p3();
    void thread_tanh_table2_address0();
    void thread_tanh_table2_ce0();
    void thread_tmp_10_fu_124_p1();
    void thread_tmp_11_fu_134_p1();
    void thread_tmp_1_fu_84_p1();
    void thread_tmp_2_fu_169_p3();
    void thread_tmp_3_fu_185_p1();
    void thread_tmp_4_fu_208_p2();
    void thread_tmp_5_fu_114_p1();
    void thread_tmp_9_fu_138_p3();
    void thread_tmp_fu_111_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
