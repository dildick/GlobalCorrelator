

================================================================
== Vivado HLS Report for 'calc_pt_hw'
================================================================
* Date:           Thu Aug 23 18:06:27 2018

* Version:        2016.4 (Build 1756540 on Mon Jan 23 19:31:01 MST 2017)
* Project:        hls_calc_pt
* Solution:       solution1
* Product family: virtex7
* Target device:  xc7vx690tffg1927-2


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   4.11|      3.53|        0.51|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+----------+
    |  Latency  |  Interval | Pipeline |
    | min | max | min | max |   Type   |
    +-----+-----+-----+-----+----------+
    |   29|   29|    1|    1| function |
    +-----+-----+-----+-----+----------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 0
IsPipeline: 1
IsRtlPipelined: 1
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 30


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 30
* Pipeline: 1
  Pipeline-0: II = 1, D = 30, States = { 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
* FSM state operations: 

 <State 1>: 0.71ns
ST_1: hwRinv_V_read (7)  [1/1] 0.00ns
_ifconv:3  %hwRinv_V_read = call i15 @_ssdm_op_Read.ap_auto.i15(i15 %hwRinv_V)

ST_1: tmp (9)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:388 (grouped into LUT with out node absInvRinv_V_1)
_ifconv:5  %tmp = call i1 @_ssdm_op_BitSelect.i1.i15.i32(i15 %hwRinv_V_read, i32 14)

ST_1: absInvRinv_V (10)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:389 (grouped into LUT with out node absInvRinv_V_1)
_ifconv:6  %absInvRinv_V = xor i15 %hwRinv_V_read, -16384

ST_1: absInvRinv_V_1 (11)  [1/1] 0.71ns  loc: src/tk-mu_simple.cpp:388 (out node of the LUT)
_ifconv:7  %absInvRinv_V_1 = select i1 %tmp, i15 %absInvRinv_V, i15 %hwRinv_V_read


 <State 2>: 3.21ns
ST_2: tmp_13 (12)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:395
_ifconv:8  %tmp_13 = sext i15 %absInvRinv_V_1 to i32

ST_2: tmp_s (13)  [6/6] 3.21ns  loc: src/tk-mu_simple.cpp:395
_ifconv:9  %tmp_s = sitofp i32 %tmp_13 to double


 <State 3>: 3.21ns
ST_3: tmp_s (13)  [5/6] 3.21ns  loc: src/tk-mu_simple.cpp:395
_ifconv:9  %tmp_s = sitofp i32 %tmp_13 to double


 <State 4>: 3.21ns
ST_4: tmp_s (13)  [4/6] 3.21ns  loc: src/tk-mu_simple.cpp:395
_ifconv:9  %tmp_s = sitofp i32 %tmp_13 to double


 <State 5>: 3.21ns
ST_5: tmp_s (13)  [3/6] 3.21ns  loc: src/tk-mu_simple.cpp:395
_ifconv:9  %tmp_s = sitofp i32 %tmp_13 to double


 <State 6>: 3.21ns
ST_6: tmp_s (13)  [2/6] 3.21ns  loc: src/tk-mu_simple.cpp:395
_ifconv:9  %tmp_s = sitofp i32 %tmp_13 to double


 <State 7>: 3.21ns
ST_7: tmp_s (13)  [1/6] 3.21ns  loc: src/tk-mu_simple.cpp:395
_ifconv:9  %tmp_s = sitofp i32 %tmp_13 to double


 <State 8>: 3.06ns
ST_8: v_assign (14)  [10/10] 3.06ns  loc: src/tk-mu_simple.cpp:395
_ifconv:10  %v_assign = fmul double %tmp_s, 1.262535e-06


 <State 9>: 3.06ns
ST_9: v_assign (14)  [9/10] 3.06ns  loc: src/tk-mu_simple.cpp:395
_ifconv:10  %v_assign = fmul double %tmp_s, 1.262535e-06


 <State 10>: 3.06ns
ST_10: v_assign (14)  [8/10] 3.06ns  loc: src/tk-mu_simple.cpp:395
_ifconv:10  %v_assign = fmul double %tmp_s, 1.262535e-06


 <State 11>: 3.06ns
ST_11: v_assign (14)  [7/10] 3.06ns  loc: src/tk-mu_simple.cpp:395
_ifconv:10  %v_assign = fmul double %tmp_s, 1.262535e-06


 <State 12>: 3.06ns
ST_12: v_assign (14)  [6/10] 3.06ns  loc: src/tk-mu_simple.cpp:395
_ifconv:10  %v_assign = fmul double %tmp_s, 1.262535e-06


 <State 13>: 3.06ns
ST_13: v_assign (14)  [5/10] 3.06ns  loc: src/tk-mu_simple.cpp:395
_ifconv:10  %v_assign = fmul double %tmp_s, 1.262535e-06


 <State 14>: 3.06ns
ST_14: v_assign (14)  [4/10] 3.06ns  loc: src/tk-mu_simple.cpp:395
_ifconv:10  %v_assign = fmul double %tmp_s, 1.262535e-06


 <State 15>: 3.06ns
ST_15: v_assign (14)  [3/10] 3.06ns  loc: src/tk-mu_simple.cpp:395
_ifconv:10  %v_assign = fmul double %tmp_s, 1.262535e-06


 <State 16>: 3.06ns
ST_16: v_assign (14)  [2/10] 3.06ns  loc: src/tk-mu_simple.cpp:395
_ifconv:10  %v_assign = fmul double %tmp_s, 1.262535e-06


 <State 17>: 3.06ns
ST_17: v_assign (14)  [1/10] 3.06ns  loc: src/tk-mu_simple.cpp:395
_ifconv:10  %v_assign = fmul double %tmp_s, 1.262535e-06


 <State 18>: 1.60ns
ST_18: ireg_V (15)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:395
_ifconv:11  %ireg_V = bitcast double %v_assign to i64

ST_18: tmp_16 (16)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:395
_ifconv:12  %tmp_16 = trunc i64 %ireg_V to i63

ST_18: isneg (17)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:395
_ifconv:13  %isneg = call i1 @_ssdm_op_BitSelect.i1.i64.i32(i64 %ireg_V, i32 63)

ST_18: exp_tmp_V (18)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:395
_ifconv:14  %exp_tmp_V = call i11 @_ssdm_op_PartSelect.i11.i64.i32.i32(i64 %ireg_V, i32 52, i32 62)

ST_18: tmp_3 (19)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:395
_ifconv:15  %tmp_3 = zext i11 %exp_tmp_V to i12

ST_18: tmp_20 (20)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:395
_ifconv:16  %tmp_20 = trunc i64 %ireg_V to i52

ST_18: tmp_5 (25)  [1/1] 1.60ns  loc: src/tk-mu_simple.cpp:395
_ifconv:21  %tmp_5 = icmp eq i63 %tmp_16, 0

ST_18: F2 (26)  [1/1] 1.33ns  loc: src/tk-mu_simple.cpp:395
_ifconv:22  %F2 = sub i12 1075, %tmp_3


 <State 19>: 3.29ns
ST_19: tmp_4 (21)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:395
_ifconv:17  %tmp_4 = call i53 @_ssdm_op_BitConcatenate.i53.i1.i52(i1 true, i52 %tmp_20)

ST_19: p_Result_s (22)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:395
_ifconv:18  %p_Result_s = zext i53 %tmp_4 to i54

ST_19: man_V_1 (23)  [1/1] 1.99ns  loc: src/tk-mu_simple.cpp:395
_ifconv:19  %man_V_1 = sub i54 0, %p_Result_s

ST_19: man_V_2 (24)  [1/1] 0.71ns  loc: src/tk-mu_simple.cpp:395
_ifconv:20  %man_V_2 = select i1 %isneg, i54 %man_V_1, i54 %p_Result_s

ST_19: tmp_7 (27)  [1/1] 1.25ns  loc: src/tk-mu_simple.cpp:395
_ifconv:23  %tmp_7 = icmp sgt i12 %F2, 22

ST_19: tmp_8 (28)  [1/1] 1.33ns  loc: src/tk-mu_simple.cpp:395
_ifconv:24  %tmp_8 = add i12 -22, %F2

ST_19: tmp_9 (29)  [1/1] 1.33ns  loc: src/tk-mu_simple.cpp:395
_ifconv:25  %tmp_9 = sub i12 22, %F2

ST_19: sh_amt (30)  [1/1] 0.71ns  loc: src/tk-mu_simple.cpp:395
_ifconv:26  %sh_amt = select i1 %tmp_7, i12 %tmp_8, i12 %tmp_9

ST_19: tmp_1 (32)  [1/1] 1.25ns  loc: src/tk-mu_simple.cpp:395
_ifconv:28  %tmp_1 = icmp eq i12 %F2, 22

ST_19: tmp_22 (33)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:395
_ifconv:29  %tmp_22 = trunc i54 %man_V_2 to i24

ST_19: tmp_6 (34)  [1/1] 1.25ns  loc: src/tk-mu_simple.cpp:395
_ifconv:30  %tmp_6 = icmp ult i12 %sh_amt, 54

ST_19: sel_tmp6_demorgan (45)  [1/1] 0.71ns  loc: src/tk-mu_simple.cpp:395
_ifconv:41  %sel_tmp6_demorgan = or i1 %tmp_5, %tmp_1

ST_19: sel_tmp6 (46)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:395 (grouped into LUT with out node sel_tmp7)
_ifconv:42  %sel_tmp6 = xor i1 %sel_tmp6_demorgan, true

ST_19: sel_tmp7 (47)  [1/1] 0.71ns  loc: src/tk-mu_simple.cpp:395 (out node of the LUT)
_ifconv:43  %sel_tmp7 = and i1 %tmp_7, %sel_tmp6


 <State 20>: 3.28ns
ST_20: sh_amt_cast (31)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:395
_ifconv:27  %sh_amt_cast = sext i12 %sh_amt to i32

ST_20: tmp_10 (35)  [1/1] 1.25ns  loc: src/tk-mu_simple.cpp:395
_ifconv:31  %tmp_10 = icmp ult i12 %sh_amt, 24

ST_20: tmp_11 (36)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:395 (grouped into LUT with out node newSel1)
_ifconv:32  %tmp_11 = zext i32 %sh_amt_cast to i54

ST_20: tmp_12 (37)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:395 (grouped into LUT with out node newSel1)
_ifconv:33  %tmp_12 = ashr i54 %man_V_2, %tmp_11

ST_20: tmp_24 (38)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:395 (grouped into LUT with out node newSel1)
_ifconv:34  %tmp_24 = trunc i54 %tmp_12 to i24

ST_20: sel_tmp1 (43)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:395 (grouped into LUT with out node or_cond2)
_ifconv:39  %sel_tmp1 = xor i1 %tmp_5, true

ST_20: sel_tmp2 (44)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:395 (grouped into LUT with out node or_cond2)
_ifconv:40  %sel_tmp2 = and i1 %tmp_1, %sel_tmp1

ST_20: sel_tmp8 (48)  [1/1] 0.71ns  loc: src/tk-mu_simple.cpp:395
_ifconv:44  %sel_tmp8 = and i1 %sel_tmp7, %tmp_6

ST_20: sel_tmp14_demorgan (49)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:395 (grouped into LUT with out node or_cond)
_ifconv:45  %sel_tmp14_demorgan = or i1 %sel_tmp6_demorgan, %tmp_7

ST_20: sel_tmp (50)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:395 (grouped into LUT with out node or_cond)
_ifconv:46  %sel_tmp = xor i1 %sel_tmp14_demorgan, true

ST_20: sel_tmp3 (51)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:395 (grouped into LUT with out node or_cond)
_ifconv:47  %sel_tmp3 = and i1 %tmp_10, %sel_tmp

ST_20: sel_tmp4 (52)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:395 (grouped into LUT with out node sel_tmp5)
_ifconv:48  %sel_tmp4 = xor i1 %tmp_6, true

ST_20: sel_tmp5 (53)  [1/1] 0.71ns  loc: src/tk-mu_simple.cpp:395 (out node of the LUT)
_ifconv:49  %sel_tmp5 = and i1 %sel_tmp7, %sel_tmp4

ST_20: or_cond (55)  [1/1] 0.71ns  loc: src/tk-mu_simple.h:497->src/tk-mu_simple.cpp:399 (out node of the LUT)
_ifconv:51  %or_cond = or i1 %sel_tmp5, %sel_tmp3

ST_20: newSel1 (56)  [1/1] 2.57ns  loc: src/tk-mu_simple.cpp:395 (out node of the LUT)
_ifconv:52  %newSel1 = select i1 %sel_tmp8, i24 %tmp_24, i24 %tmp_22

ST_20: or_cond1 (57)  [1/1] 0.00ns  loc: src/tk-mu_simple.h:497->src/tk-mu_simple.cpp:399 (grouped into LUT with out node or_cond2)
_ifconv:53  %or_cond1 = or i1 %sel_tmp8, %sel_tmp2

ST_20: or_cond2 (59)  [1/1] 0.71ns  loc: src/tk-mu_simple.h:497->src/tk-mu_simple.cpp:399 (out node of the LUT)
_ifconv:55  %or_cond2 = or i1 %or_cond, %or_cond1


 <State 21>: 2.71ns
ST_21: p_1 (39)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:395 (grouped into LUT with out node newSel2)
_ifconv:35  %p_1 = select i1 %isneg, i24 -1, i24 0

ST_21: tmp_14 (40)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:395 (grouped into LUT with out node newSel2)
_ifconv:36  %tmp_14 = sext i24 %tmp_22 to i32

ST_21: tmp_15 (41)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:395 (grouped into LUT with out node newSel2)
_ifconv:37  %tmp_15 = shl i32 %tmp_14, %sh_amt_cast

ST_21: tmp_25 (42)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:395 (grouped into LUT with out node newSel2)
_ifconv:38  %tmp_25 = trunc i32 %tmp_15 to i24

ST_21: newSel (54)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:395 (grouped into LUT with out node newSel2)
_ifconv:50  %newSel = select i1 %sel_tmp5, i24 %p_1, i24 %tmp_25

ST_21: newSel2 (58)  [1/1] 2.00ns  loc: src/tk-mu_simple.h:497->src/tk-mu_simple.cpp:399 (out node of the LUT)
_ifconv:54  %newSel2 = select i1 %or_cond, i24 %newSel, i24 %newSel1

ST_21: inhwRinv_V (60)  [1/1] 0.71ns  loc: src/tk-mu_simple.h:497->src/tk-mu_simple.cpp:399 (out node of the LUT)
_ifconv:56  %inhwRinv_V = select i1 %or_cond2, i24 %newSel2, i24 0

ST_21: absPt_V (61)  [6/6] 0.00ns  loc: src/tk-mu_simple.h:499->src/tk-mu_simple.cpp:399
_ifconv:57  %absPt_V = call fastcc i14 @rinvToPt(i24 %inhwRinv_V)


 <State 22>: 3.53ns
ST_22: absPt_V (61)  [5/6] 3.53ns  loc: src/tk-mu_simple.h:499->src/tk-mu_simple.cpp:399
_ifconv:57  %absPt_V = call fastcc i14 @rinvToPt(i24 %inhwRinv_V)


 <State 23>: 3.53ns
ST_23: absPt_V (61)  [4/6] 3.53ns  loc: src/tk-mu_simple.h:499->src/tk-mu_simple.cpp:399
_ifconv:57  %absPt_V = call fastcc i14 @rinvToPt(i24 %inhwRinv_V)


 <State 24>: 3.53ns
ST_24: absPt_V (61)  [3/6] 3.53ns  loc: src/tk-mu_simple.h:499->src/tk-mu_simple.cpp:399
_ifconv:57  %absPt_V = call fastcc i14 @rinvToPt(i24 %inhwRinv_V)


 <State 25>: 3.53ns
ST_25: absPt_V (61)  [2/6] 3.53ns  loc: src/tk-mu_simple.h:499->src/tk-mu_simple.cpp:399
_ifconv:57  %absPt_V = call fastcc i14 @rinvToPt(i24 %inhwRinv_V)


 <State 26>: 3.10ns
ST_26: absPt_V (61)  [1/6] 3.10ns  loc: src/tk-mu_simple.h:499->src/tk-mu_simple.cpp:399
_ifconv:57  %absPt_V = call fastcc i14 @rinvToPt(i24 %inhwRinv_V)


 <State 27>: 2.94ns
ST_27: OP1_V_cast (62)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:401
_ifconv:58  %OP1_V_cast = sext i14 %absPt_V to i27

ST_27: r_V (63)  [3/3] 2.94ns  loc: src/tk-mu_simple.cpp:401
_ifconv:59  %r_V = mul i27 2807, %OP1_V_cast


 <State 28>: 2.94ns
ST_28: r_V (63)  [2/3] 2.94ns  loc: src/tk-mu_simple.cpp:401
_ifconv:59  %r_V = mul i27 2807, %OP1_V_cast


 <State 29>: 0.00ns
ST_29: r_V (63)  [1/3] 0.00ns  loc: src/tk-mu_simple.cpp:401
_ifconv:59  %r_V = mul i27 2807, %OP1_V_cast

ST_29: ret_V (64)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:401
_ifconv:60  %ret_V = call i14 @_ssdm_op_PartSelect.i14.i27.i32.i32(i27 %r_V, i32 10, i32 23)

ST_29: tmp_27 (66)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:401
_ifconv:62  %tmp_27 = trunc i27 %r_V to i10

ST_29: tmp_18 (69)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:401
_ifconv:65  %tmp_18 = call i14 @_ssdm_op_PartSelect.i14.i27.i32.i32(i27 %r_V, i32 10, i32 23)


 <State 30>: 2.10ns
ST_30: StgValue_111 (4)  [1/1] 0.00ns
_ifconv:0  call void (...)* @_ssdm_op_SpecBitsMap(i15 %hwRinv_V), !map !383

ST_30: StgValue_112 (5)  [1/1] 0.00ns
_ifconv:1  call void (...)* @_ssdm_op_SpecBitsMap(i14* %outPt_V), !map !389

ST_30: StgValue_113 (6)  [1/1] 0.00ns
_ifconv:2  call void (...)* @_ssdm_op_SpecTopModule([11 x i8]* @calc_pt_hw_str) nounwind

ST_30: StgValue_114 (8)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:384
_ifconv:4  call void (...)* @_ssdm_op_SpecPipeline(i32 -1, i32 1, i32 1, i32 0, [1 x i8]* @p_str) nounwind

ST_30: tmp_26 (65)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:401 (grouped into LUT with out node tmp_21)
_ifconv:61  %tmp_26 = call i1 @_ssdm_op_BitSelect.i1.i27.i32(i27 %r_V, i32 26)

ST_30: tmp_17 (67)  [1/1] 1.23ns  loc: src/tk-mu_simple.cpp:401
_ifconv:63  %tmp_17 = icmp eq i10 %tmp_27, 0

ST_30: ret_V_1 (68)  [1/1] 1.39ns  loc: src/tk-mu_simple.cpp:401
_ifconv:64  %ret_V_1 = add i14 1, %ret_V

ST_30: tmp_19 (70)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:401 (grouped into LUT with out node tmp_21)
_ifconv:66  %tmp_19 = select i1 %tmp_17, i14 %tmp_18, i14 %ret_V_1

ST_30: tmp_21 (71)  [1/1] 0.71ns  loc: src/tk-mu_simple.cpp:401 (out node of the LUT)
_ifconv:67  %tmp_21 = select i1 %tmp_26, i14 %tmp_19, i14 %tmp_18

ST_30: StgValue_120 (72)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:401
_ifconv:68  call void @_ssdm_op_Write.ap_auto.i14P(i14* %outPt_V, i14 %tmp_21)

ST_30: StgValue_121 (73)  [1/1] 0.00ns  loc: src/tk-mu_simple.cpp:402
_ifconv:69  ret void



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 4.11ns, clock uncertainty: 0.514ns.

 <State 1>: 0.71ns
The critical path consists of the following:
	wire read on port 'hwRinv_V' [7]  (0 ns)
	'select' operation ('absInvRinv.V', src/tk-mu_simple.cpp:388) [11]  (0.71 ns)

 <State 2>: 3.21ns
The critical path consists of the following:
	'sitodp' operation ('tmp_s', src/tk-mu_simple.cpp:395) [13]  (3.21 ns)

 <State 3>: 3.21ns
The critical path consists of the following:
	'sitodp' operation ('tmp_s', src/tk-mu_simple.cpp:395) [13]  (3.21 ns)

 <State 4>: 3.21ns
The critical path consists of the following:
	'sitodp' operation ('tmp_s', src/tk-mu_simple.cpp:395) [13]  (3.21 ns)

 <State 5>: 3.21ns
The critical path consists of the following:
	'sitodp' operation ('tmp_s', src/tk-mu_simple.cpp:395) [13]  (3.21 ns)

 <State 6>: 3.21ns
The critical path consists of the following:
	'sitodp' operation ('tmp_s', src/tk-mu_simple.cpp:395) [13]  (3.21 ns)

 <State 7>: 3.21ns
The critical path consists of the following:
	'sitodp' operation ('tmp_s', src/tk-mu_simple.cpp:395) [13]  (3.21 ns)

 <State 8>: 3.06ns
The critical path consists of the following:
	'dmul' operation ('v', src/tk-mu_simple.cpp:395) [14]  (3.06 ns)

 <State 9>: 3.06ns
The critical path consists of the following:
	'dmul' operation ('v', src/tk-mu_simple.cpp:395) [14]  (3.06 ns)

 <State 10>: 3.06ns
The critical path consists of the following:
	'dmul' operation ('v', src/tk-mu_simple.cpp:395) [14]  (3.06 ns)

 <State 11>: 3.06ns
The critical path consists of the following:
	'dmul' operation ('v', src/tk-mu_simple.cpp:395) [14]  (3.06 ns)

 <State 12>: 3.06ns
The critical path consists of the following:
	'dmul' operation ('v', src/tk-mu_simple.cpp:395) [14]  (3.06 ns)

 <State 13>: 3.06ns
The critical path consists of the following:
	'dmul' operation ('v', src/tk-mu_simple.cpp:395) [14]  (3.06 ns)

 <State 14>: 3.06ns
The critical path consists of the following:
	'dmul' operation ('v', src/tk-mu_simple.cpp:395) [14]  (3.06 ns)

 <State 15>: 3.06ns
The critical path consists of the following:
	'dmul' operation ('v', src/tk-mu_simple.cpp:395) [14]  (3.06 ns)

 <State 16>: 3.06ns
The critical path consists of the following:
	'dmul' operation ('v', src/tk-mu_simple.cpp:395) [14]  (3.06 ns)

 <State 17>: 3.06ns
The critical path consists of the following:
	'dmul' operation ('v', src/tk-mu_simple.cpp:395) [14]  (3.06 ns)

 <State 18>: 1.6ns
The critical path consists of the following:
	'icmp' operation ('tmp_5', src/tk-mu_simple.cpp:395) [25]  (1.6 ns)

 <State 19>: 3.29ns
The critical path consists of the following:
	'add' operation ('tmp_8', src/tk-mu_simple.cpp:395) [28]  (1.33 ns)
	'select' operation ('sh_amt', src/tk-mu_simple.cpp:395) [30]  (0.71 ns)
	'icmp' operation ('tmp_6', src/tk-mu_simple.cpp:395) [34]  (1.25 ns)

 <State 20>: 3.28ns
The critical path consists of the following:
	'and' operation ('sel_tmp8', src/tk-mu_simple.cpp:395) [48]  (0.71 ns)
	'select' operation ('newSel1', src/tk-mu_simple.cpp:395) [56]  (2.57 ns)

 <State 21>: 2.71ns
The critical path consists of the following:
	'select' operation ('p_1', src/tk-mu_simple.cpp:395) [39]  (0 ns)
	'select' operation ('newSel', src/tk-mu_simple.cpp:395) [54]  (0 ns)
	'select' operation ('newSel2', src/tk-mu_simple.h:497->src/tk-mu_simple.cpp:399) [58]  (2 ns)
	'select' operation ('inhwRinv.V', src/tk-mu_simple.h:497->src/tk-mu_simple.cpp:399) [60]  (0.71 ns)

 <State 22>: 3.53ns
The critical path consists of the following:
	'call' operation ('absPt.V', src/tk-mu_simple.h:499->src/tk-mu_simple.cpp:399) to 'rinvToPt' [61]  (3.53 ns)

 <State 23>: 3.53ns
The critical path consists of the following:
	'call' operation ('absPt.V', src/tk-mu_simple.h:499->src/tk-mu_simple.cpp:399) to 'rinvToPt' [61]  (3.53 ns)

 <State 24>: 3.53ns
The critical path consists of the following:
	'call' operation ('absPt.V', src/tk-mu_simple.h:499->src/tk-mu_simple.cpp:399) to 'rinvToPt' [61]  (3.53 ns)

 <State 25>: 3.53ns
The critical path consists of the following:
	'call' operation ('absPt.V', src/tk-mu_simple.h:499->src/tk-mu_simple.cpp:399) to 'rinvToPt' [61]  (3.53 ns)

 <State 26>: 3.1ns
The critical path consists of the following:
	'call' operation ('absPt.V', src/tk-mu_simple.h:499->src/tk-mu_simple.cpp:399) to 'rinvToPt' [61]  (3.1 ns)

 <State 27>: 2.94ns
The critical path consists of the following:
	'mul' operation ('r.V', src/tk-mu_simple.cpp:401) [63]  (2.94 ns)

 <State 28>: 2.94ns
The critical path consists of the following:
	'mul' operation ('r.V', src/tk-mu_simple.cpp:401) [63]  (2.94 ns)

 <State 29>: 0ns
The critical path consists of the following:

 <State 30>: 2.1ns
The critical path consists of the following:
	'add' operation ('ret_V_1', src/tk-mu_simple.cpp:401) [68]  (1.39 ns)
	'select' operation ('tmp_19', src/tk-mu_simple.cpp:401) [70]  (0 ns)
	'select' operation ('tmp_21', src/tk-mu_simple.cpp:401) [71]  (0.71 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
