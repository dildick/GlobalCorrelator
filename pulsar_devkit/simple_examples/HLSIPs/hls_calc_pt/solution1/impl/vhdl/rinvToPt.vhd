-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rinvToPt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of rinvToPt is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv25_1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv14_40 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_const_lv32_FFFFFF51 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111101010001";
    constant ap_const_lv32_400000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal rinvToPt_table1_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal rinvToPt_table1_ce0 : STD_LOGIC;
    signal rinvToPt_table1_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_193_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_reg_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_213 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_4_fu_79_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_219 : STD_LOGIC_VECTOR (7 downto 0);
    signal index_fu_126_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_reg_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_229 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter4_tmp_9_reg_229 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_235 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter4_icmp_reg_235 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_158_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_2_fu_92_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal ret_V_cast_cast_fu_82_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal ret_V_fu_105_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_7_fu_99_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_111_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_114_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_85_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_118_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_142_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal sel_tmp1_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_cast_fu_172_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_193_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_193_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_idle_pp0 : STD_LOGIC;

    component calc_pt_hw_mac_mucud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component rinvToPt_rinvToPtbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    rinvToPt_table1_U : component rinvToPt_rinvToPtbkb
    generic map (
        DataWidth => 14,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rinvToPt_table1_address0,
        ce0 => rinvToPt_table1_ce0,
        q0 => rinvToPt_table1_q0);

    calc_pt_hw_mac_mucud_U1 : component calc_pt_hw_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 9,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_193_p0,
        din1 => data_V_read,
        din2 => grp_fu_193_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_193_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then
                ap_pipeline_reg_pp0_iter4_icmp_reg_235 <= icmp_reg_235;
                ap_pipeline_reg_pp0_iter4_tmp_9_reg_229 <= tmp_9_reg_229;
                icmp_reg_235 <= icmp_fu_152_p2;
                index_reg_224 <= index_fu_126_p3;
                tmp_2_reg_213 <= grp_fu_193_p3(31 downto 8);
                tmp_4_reg_219 <= tmp_4_fu_79_p1;
                tmp_9_reg_229 <= index_fu_126_p3(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then
                r_V_reg_208 <= grp_fu_193_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_enable_reg_pp0_iter0, ap_pipeline_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0 downto 0);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_pipeline_idle_pp0_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4))) then 
            ap_pipeline_idle_pp0 <= ap_const_logic_1;
        else 
            ap_pipeline_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        sel_tmp_cast_fu_172_p3 when (tmp_8_fu_180_p2(0) = '1') else 
        rinvToPt_table1_q0;
    grp_fu_193_p0 <= ap_const_lv32_FFFFFF51(9 - 1 downto 0);
    grp_fu_193_p2 <= ap_const_lv32_400000(24 - 1 downto 0);
    icmp_fu_152_p2 <= "1" when (signed(tmp_10_fu_142_p4) > signed(ap_const_lv18_0)) else "0";
    index_fu_126_p3 <= 
        tmp_5_fu_118_p3 when (tmp_3_fu_85_p3(0) = '1') else 
        tmp_6_fu_111_p1;
    p_Result_2_fu_92_p3 <= (tmp_4_reg_219 & ap_const_lv14_0);
        ret_V_cast_cast_fu_82_p1 <= std_logic_vector(resize(signed(tmp_2_reg_213),25));

    ret_V_fu_105_p2 <= std_logic_vector(unsigned(ap_const_lv25_1) + unsigned(ret_V_cast_cast_fu_82_p1));
    rinvToPt_table1_address0 <= tmp_1_fu_158_p1(14 - 1 downto 0);

    rinvToPt_table1_ce0_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4)
    begin
        if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4))) then 
            rinvToPt_table1_ce0 <= ap_const_logic_1;
        else 
            rinvToPt_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp1_fu_162_p2 <= (ap_pipeline_reg_pp0_iter4_tmp_9_reg_229 xor ap_const_lv1_1);
    sel_tmp2_fu_167_p2 <= (ap_pipeline_reg_pp0_iter4_icmp_reg_235 and sel_tmp1_fu_162_p2);
    sel_tmp_cast_fu_172_p3 <= 
        ap_const_lv14_0 when (sel_tmp2_fu_167_p2(0) = '1') else 
        ap_const_lv14_40;
    tmp_10_fu_142_p4 <= index_fu_126_p3(31 downto 14);
    tmp_1_fu_158_p1 <= std_logic_vector(resize(unsigned(index_reg_224),64));
    tmp_3_fu_85_p3 <= r_V_reg_208(31 downto 31);
    tmp_4_fu_79_p1 <= grp_fu_193_p3(8 - 1 downto 0);
    tmp_5_fu_118_p3 <= 
        tmp_6_fu_111_p1 when (tmp_7_fu_99_p2(0) = '1') else 
        tmp_s_fu_114_p1;
        tmp_6_fu_111_p1 <= std_logic_vector(resize(signed(tmp_2_reg_213),32));

    tmp_7_fu_99_p2 <= "1" when (p_Result_2_fu_92_p3 = ap_const_lv22_0) else "0";
    tmp_8_fu_180_p2 <= (sel_tmp2_fu_167_p2 or ap_pipeline_reg_pp0_iter4_tmp_9_reg_229);
        tmp_s_fu_114_p1 <= std_logic_vector(resize(signed(ret_V_fu_105_p2),32));

end behav;
