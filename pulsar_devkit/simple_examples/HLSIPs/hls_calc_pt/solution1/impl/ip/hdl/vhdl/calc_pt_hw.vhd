-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity calc_pt_hw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    hwRinv_V : IN STD_LOGIC_VECTOR (14 downto 0);
    outPt_V : OUT STD_LOGIC_VECTOR (13 downto 0);
    outPt_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of calc_pt_hw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "calc_pt_hw,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7vx690tffg1927-2,HLS_INPUT_CLOCK=4.115000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.527125,HLS_SYN_LAT=29,HLS_SYN_TPT=1,HLS_SYN_MEM=14,HLS_SYN_DSP=13,HLS_SYN_FF=1472,HLS_SYN_LUT=1498}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_3EB52E8BE9B8ACE4 : STD_LOGIC_VECTOR (63 downto 0) := "0011111010110101001011101000101111101001101110001010110011100100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv15_4000 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_16 : STD_LOGIC_VECTOR (11 downto 0) := "000000010110";
    constant ap_const_lv12_FEA : STD_LOGIC_VECTOR (11 downto 0) := "111111101010";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_18 : STD_LOGIC_VECTOR (11 downto 0) := "000000011000";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv27_AF7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000101011110111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal absInvRinv_V_1_fu_126_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal absInvRinv_V_1_reg_453 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_109_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_463 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_104_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_assign_reg_468 : STD_LOGIC_VECTOR (63 downto 0);
    signal isneg_reg_473 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter18_isneg_reg_473 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter19_isneg_reg_473 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_167_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_20_reg_479 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_5_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_484 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter18_tmp_5_reg_484 : STD_LOGIC_VECTOR (0 downto 0);
    signal F2_fu_177_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_reg_490 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_2_fu_200_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_498 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_7_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_503 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_222_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_508 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_514 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_235_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_22_reg_519 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_pipeline_reg_pp0_iter19_tmp_22_reg_519 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_6_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_525 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_demorgan_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_demorgan_reg_531 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_reg_536 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_cast_fu_262_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_amt_cast_reg_542 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp5_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_reg_547 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_552 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel1_fu_329_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal newSel1_reg_557 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_cond2_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_reg_562 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_rinvToPt_fu_97_ap_return : STD_LOGIC_VECTOR (13 downto 0);
    signal absPt_V_reg_567 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_444_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_reg_577 : STD_LOGIC_VECTOR (26 downto 0);
    signal ret_V_reg_582 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_27_fu_400_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_27_reg_587 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_18_reg_592 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_rinvToPt_fu_97_ap_start : STD_LOGIC;
    signal grp_rinvToPt_fu_97_ap_done : STD_LOGIC;
    signal grp_rinvToPt_fu_97_ap_idle : STD_LOGIC;
    signal grp_rinvToPt_fu_97_ap_ready : STD_LOGIC;
    signal grp_rinvToPt_fu_97_data_V_read : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_reg_grp_rinvToPt_fu_97_ap_start : STD_LOGIC := '0';
    signal grp_fu_109_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_112_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal absInvRinv_V_fu_120_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ireg_V_fu_138_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_153_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_16_fu_141_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_3_fu_163_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_fu_183_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_s_fu_190_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_194_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_8_fu_212_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_fu_217_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sel_tmp6_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_270_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_12_fu_274_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal sel_tmp1_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp14_demorgan_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_279_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sel_tmp2_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_355_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1_fu_348_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_25_fu_363_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal newSel_fu_367_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal newSel2_fu_374_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_17_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_1_fu_424_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_26_fu_412_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_429_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_444_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_idle_pp0 : STD_LOGIC;

    component rinvToPt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component calc_pt_hw_dmul_6dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component calc_pt_hw_sitodpeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component calc_pt_hw_mul_mufYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;



begin
    grp_rinvToPt_fu_97 : component rinvToPt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_rinvToPt_fu_97_ap_start,
        ap_done => grp_rinvToPt_fu_97_ap_done,
        ap_idle => grp_rinvToPt_fu_97_ap_idle,
        ap_ready => grp_rinvToPt_fu_97_ap_ready,
        data_V_read => grp_rinvToPt_fu_97_data_V_read,
        ap_return => grp_rinvToPt_fu_97_ap_return);

    calc_pt_hw_dmul_6dEe_U4 : component calc_pt_hw_dmul_6dEe
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_s_reg_463,
        din1 => ap_const_lv64_3EB52E8BE9B8ACE4,
        ce => ap_const_logic_1,
        dout => grp_fu_104_p2);

    calc_pt_hw_sitodpeOg_U5 : component calc_pt_hw_sitodpeOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_109_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_109_p1);

    calc_pt_hw_mul_mufYi_U6 : component calc_pt_hw_mul_mufYi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 13,
        din1_WIDTH => 14,
        dout_WIDTH => 27)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_444_p0,
        din1 => absPt_V_reg_567,
        ce => ap_const_logic_1,
        dout => grp_fu_444_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_rinvToPt_fu_97_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_rinvToPt_fu_97_ap_start <= ap_const_logic_0;
            else
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter19))) then 
                    ap_reg_grp_rinvToPt_fu_97_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_rinvToPt_fu_97_ap_ready)) then 
                    ap_reg_grp_rinvToPt_fu_97_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)))) then
                F2_reg_490 <= F2_fu_177_p2;
                absPt_V_reg_567 <= grp_rinvToPt_fu_97_ap_return;
                ap_pipeline_reg_pp0_iter18_isneg_reg_473 <= isneg_reg_473;
                ap_pipeline_reg_pp0_iter18_tmp_5_reg_484 <= tmp_5_reg_484;
                ap_pipeline_reg_pp0_iter19_isneg_reg_473 <= ap_pipeline_reg_pp0_iter18_isneg_reg_473;
                ap_pipeline_reg_pp0_iter19_tmp_22_reg_519 <= tmp_22_reg_519;
                isneg_reg_473 <= ireg_V_fu_138_p1(63 downto 63);
                man_V_2_reg_498 <= man_V_2_fu_200_p3;
                newSel1_reg_557 <= newSel1_fu_329_p3;
                or_cond2_reg_562 <= or_cond2_fu_342_p2;
                or_cond_reg_552 <= or_cond_fu_323_p2;
                r_V_reg_577 <= grp_fu_444_p2;
                ret_V_reg_582 <= grp_fu_444_p2(23 downto 10);
                sel_tmp5_reg_547 <= sel_tmp5_fu_318_p2;
                sel_tmp6_demorgan_reg_531 <= sel_tmp6_demorgan_fu_245_p2;
                sel_tmp7_reg_536 <= sel_tmp7_fu_256_p2;
                sh_amt_cast_reg_542 <= sh_amt_cast_fu_262_p1;
                sh_amt_reg_508 <= sh_amt_fu_222_p3;
                tmp_18_reg_592 <= grp_fu_444_p2(23 downto 10);
                tmp_1_reg_514 <= tmp_1_fu_230_p2;
                tmp_20_reg_479 <= tmp_20_fu_167_p1;
                tmp_22_reg_519 <= tmp_22_fu_235_p1;
                tmp_27_reg_587 <= tmp_27_fu_400_p1;
                tmp_5_reg_484 <= tmp_5_fu_171_p2;
                tmp_6_reg_525 <= tmp_6_fu_239_p2;
                tmp_7_reg_503 <= tmp_7_fu_207_p2;
                tmp_s_reg_463 <= grp_fu_109_p1;
                v_assign_reg_468 <= grp_fu_104_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))))) then
                absInvRinv_V_1_reg_453 <= absInvRinv_V_1_fu_126_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_enable_reg_pp0_iter0, ap_pipeline_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    F2_fu_177_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_3_fu_163_p1));
    absInvRinv_V_1_fu_126_p3 <= 
        absInvRinv_V_fu_120_p2 when (tmp_fu_112_p3(0) = '1') else 
        hwRinv_V;
    absInvRinv_V_fu_120_p2 <= (hwRinv_V xor ap_const_lv15_4000);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0 downto 0);

    ap_done_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter29)
    begin
        if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter29))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8) and (ap_const_logic_0 = ap_enable_reg_pp0_iter9) and (ap_const_logic_0 = ap_enable_reg_pp0_iter10) and (ap_const_logic_0 = ap_enable_reg_pp0_iter11) and (ap_const_logic_0 = ap_enable_reg_pp0_iter12) and (ap_const_logic_0 = ap_enable_reg_pp0_iter13) and (ap_const_logic_0 = ap_enable_reg_pp0_iter14) and (ap_const_logic_0 = ap_enable_reg_pp0_iter15) and (ap_const_logic_0 = ap_enable_reg_pp0_iter16) and (ap_const_logic_0 = ap_enable_reg_pp0_iter17) and (ap_const_logic_0 = ap_enable_reg_pp0_iter18) and (ap_const_logic_0 = ap_enable_reg_pp0_iter19) and (ap_const_logic_0 = ap_enable_reg_pp0_iter20) and (ap_const_logic_0 = ap_enable_reg_pp0_iter21) and (ap_const_logic_0 = ap_enable_reg_pp0_iter22) and (ap_const_logic_0 = ap_enable_reg_pp0_iter23) and (ap_const_logic_0 = ap_enable_reg_pp0_iter24) and (ap_const_logic_0 = ap_enable_reg_pp0_iter25) and (ap_const_logic_0 = ap_enable_reg_pp0_iter26) and (ap_const_logic_0 = ap_enable_reg_pp0_iter27) and (ap_const_logic_0 = ap_enable_reg_pp0_iter28) and (ap_const_logic_0 = ap_enable_reg_pp0_iter29))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_pipeline_idle_pp0_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8) and (ap_const_logic_0 = ap_enable_reg_pp0_iter9) and (ap_const_logic_0 = ap_enable_reg_pp0_iter10) and (ap_const_logic_0 = ap_enable_reg_pp0_iter11) and (ap_const_logic_0 = ap_enable_reg_pp0_iter12) and (ap_const_logic_0 = ap_enable_reg_pp0_iter13) and (ap_const_logic_0 = ap_enable_reg_pp0_iter14) and (ap_const_logic_0 = ap_enable_reg_pp0_iter15) and (ap_const_logic_0 = ap_enable_reg_pp0_iter16) and (ap_const_logic_0 = ap_enable_reg_pp0_iter17) and (ap_const_logic_0 = ap_enable_reg_pp0_iter18) and (ap_const_logic_0 = ap_enable_reg_pp0_iter19) and (ap_const_logic_0 = ap_enable_reg_pp0_iter20) and (ap_const_logic_0 = ap_enable_reg_pp0_iter21) and (ap_const_logic_0 = ap_enable_reg_pp0_iter22) and (ap_const_logic_0 = ap_enable_reg_pp0_iter23) and (ap_const_logic_0 = ap_enable_reg_pp0_iter24) and (ap_const_logic_0 = ap_enable_reg_pp0_iter25) and (ap_const_logic_0 = ap_enable_reg_pp0_iter26) and (ap_const_logic_0 = ap_enable_reg_pp0_iter27) and (ap_const_logic_0 = ap_enable_reg_pp0_iter28))) then 
            ap_pipeline_idle_pp0 <= ap_const_logic_1;
        else 
            ap_pipeline_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exp_tmp_V_fu_153_p4 <= ireg_V_fu_138_p1(62 downto 52);
        grp_fu_109_p0 <= std_logic_vector(resize(signed(absInvRinv_V_1_reg_453),32));

    grp_fu_444_p0 <= ap_const_lv27_AF7(13 - 1 downto 0);
    grp_rinvToPt_fu_97_ap_start <= ap_reg_grp_rinvToPt_fu_97_ap_start;
    grp_rinvToPt_fu_97_data_V_read <= 
        newSel2_fu_374_p3 when (or_cond2_reg_562(0) = '1') else 
        ap_const_lv24_0;
    ireg_V_fu_138_p1 <= v_assign_reg_468;
    man_V_1_fu_194_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_s_fu_190_p1));
    man_V_2_fu_200_p3 <= 
        man_V_1_fu_194_p2 when (isneg_reg_473(0) = '1') else 
        p_Result_s_fu_190_p1;
    newSel1_fu_329_p3 <= 
        tmp_24_fu_279_p1 when (sel_tmp8_fu_293_p2(0) = '1') else 
        tmp_22_reg_519;
    newSel2_fu_374_p3 <= 
        newSel_fu_367_p3 when (or_cond_reg_552(0) = '1') else 
        newSel1_reg_557;
    newSel_fu_367_p3 <= 
        p_1_fu_348_p3 when (sel_tmp5_reg_547(0) = '1') else 
        tmp_25_fu_363_p1;
    or_cond1_fu_336_p2 <= (sel_tmp8_fu_293_p2 or sel_tmp2_fu_288_p2);
    or_cond2_fu_342_p2 <= (or_cond_fu_323_p2 or or_cond1_fu_336_p2);
    or_cond_fu_323_p2 <= (sel_tmp5_fu_318_p2 or sel_tmp3_fu_307_p2);
    outPt_V <= 
        tmp_19_fu_429_p3 when (tmp_26_fu_412_p3(0) = '1') else 
        tmp_18_reg_592;

    outPt_V_ap_vld_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter29)
    begin
        if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter29))) then 
            outPt_V_ap_vld <= ap_const_logic_1;
        else 
            outPt_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_1_fu_348_p3 <= 
        ap_const_lv24_FFFFFF when (ap_pipeline_reg_pp0_iter19_isneg_reg_473(0) = '1') else 
        ap_const_lv24_0;
    p_Result_s_fu_190_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_183_p3),54));
    ret_V_1_fu_424_p2 <= std_logic_vector(unsigned(ap_const_lv14_1) + unsigned(ret_V_reg_582));
    sel_tmp14_demorgan_fu_297_p2 <= (sel_tmp6_demorgan_reg_531 or tmp_7_reg_503);
    sel_tmp1_fu_283_p2 <= (ap_pipeline_reg_pp0_iter18_tmp_5_reg_484 xor ap_const_lv1_1);
    sel_tmp2_fu_288_p2 <= (tmp_1_reg_514 and sel_tmp1_fu_283_p2);
    sel_tmp3_fu_307_p2 <= (tmp_10_fu_265_p2 and sel_tmp_fu_301_p2);
    sel_tmp4_fu_313_p2 <= (tmp_6_reg_525 xor ap_const_lv1_1);
    sel_tmp5_fu_318_p2 <= (sel_tmp7_reg_536 and sel_tmp4_fu_313_p2);
    sel_tmp6_demorgan_fu_245_p2 <= (tmp_5_reg_484 or tmp_1_fu_230_p2);
    sel_tmp6_fu_250_p2 <= (sel_tmp6_demorgan_fu_245_p2 xor ap_const_lv1_1);
    sel_tmp7_fu_256_p2 <= (tmp_7_fu_207_p2 and sel_tmp6_fu_250_p2);
    sel_tmp8_fu_293_p2 <= (sel_tmp7_reg_536 and tmp_6_reg_525);
    sel_tmp_fu_301_p2 <= (sel_tmp14_demorgan_fu_297_p2 xor ap_const_lv1_1);
        sh_amt_cast_fu_262_p1 <= std_logic_vector(resize(signed(sh_amt_reg_508),32));

    sh_amt_fu_222_p3 <= 
        tmp_8_fu_212_p2 when (tmp_7_fu_207_p2(0) = '1') else 
        tmp_9_fu_217_p2;
    tmp_10_fu_265_p2 <= "1" when (unsigned(sh_amt_reg_508) < unsigned(ap_const_lv12_18)) else "0";
    tmp_11_fu_270_p1 <= std_logic_vector(resize(unsigned(sh_amt_cast_fu_262_p1),54));
    tmp_12_fu_274_p2 <= std_logic_vector(shift_right(signed(man_V_2_reg_498),to_integer(unsigned('0' & tmp_11_fu_270_p1(31-1 downto 0)))));
        tmp_14_fu_355_p1 <= std_logic_vector(resize(signed(ap_pipeline_reg_pp0_iter19_tmp_22_reg_519),32));

    tmp_15_fu_358_p2 <= std_logic_vector(shift_left(unsigned(tmp_14_fu_355_p1),to_integer(unsigned('0' & sh_amt_cast_reg_542(31-1 downto 0)))));
    tmp_16_fu_141_p1 <= ireg_V_fu_138_p1(63 - 1 downto 0);
    tmp_17_fu_419_p2 <= "1" when (tmp_27_reg_587 = ap_const_lv10_0) else "0";
    tmp_19_fu_429_p3 <= 
        tmp_18_reg_592 when (tmp_17_fu_419_p2(0) = '1') else 
        ret_V_1_fu_424_p2;
    tmp_1_fu_230_p2 <= "1" when (F2_reg_490 = ap_const_lv12_16) else "0";
    tmp_20_fu_167_p1 <= ireg_V_fu_138_p1(52 - 1 downto 0);
    tmp_22_fu_235_p1 <= man_V_2_fu_200_p3(24 - 1 downto 0);
    tmp_24_fu_279_p1 <= tmp_12_fu_274_p2(24 - 1 downto 0);
    tmp_25_fu_363_p1 <= tmp_15_fu_358_p2(24 - 1 downto 0);
    tmp_26_fu_412_p3 <= r_V_reg_577(26 downto 26);
    tmp_27_fu_400_p1 <= grp_fu_444_p2(10 - 1 downto 0);
    tmp_3_fu_163_p1 <= std_logic_vector(resize(unsigned(exp_tmp_V_fu_153_p4),12));
    tmp_4_fu_183_p3 <= (ap_const_lv1_1 & tmp_20_reg_479);
    tmp_5_fu_171_p2 <= "1" when (tmp_16_fu_141_p1 = ap_const_lv63_0) else "0";
    tmp_6_fu_239_p2 <= "1" when (unsigned(sh_amt_fu_222_p3) < unsigned(ap_const_lv12_36)) else "0";
    tmp_7_fu_207_p2 <= "1" when (signed(F2_reg_490) > signed(ap_const_lv12_16)) else "0";
    tmp_8_fu_212_p2 <= std_logic_vector(signed(ap_const_lv12_FEA) + signed(F2_reg_490));
    tmp_9_fu_217_p2 <= std_logic_vector(unsigned(ap_const_lv12_16) - unsigned(F2_reg_490));
    tmp_fu_112_p3 <= hwRinv_V(14 downto 14);
end behav;
