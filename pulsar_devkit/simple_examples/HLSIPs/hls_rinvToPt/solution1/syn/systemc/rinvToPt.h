// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _rinvToPt_HH_
#define _rinvToPt_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "rinvToPt_mac_mulacud.h"
#include "rinvToPt_rinvToPtbkb.h"

namespace ap_rtl {

struct rinvToPt : public sc_module {
    // Port declarations 9
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<24> > data_V;
    sc_out< sc_lv<14> > res_V;
    sc_out< sc_logic > res_V_ap_vld;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    rinvToPt(sc_module_name name);
    SC_HAS_PROCESS(rinvToPt);

    ~rinvToPt();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    rinvToPt_rinvToPtbkb* rinvToPt_table1_U;
    rinvToPt_mac_mulacud<1,3,9,24,24,32>* rinvToPt_mac_mulacud_U1;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_lv<1> > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_lv<14> > rinvToPt_table1_address0;
    sc_signal< sc_logic > rinvToPt_table1_ce0;
    sc_signal< sc_lv<14> > rinvToPt_table1_q0;
    sc_signal< sc_lv<32> > grp_fu_211_p3;
    sc_signal< sc_lv<32> > r_V_reg_226;
    sc_signal< sc_lv<24> > tmp_2_reg_231;
    sc_signal< sc_lv<8> > tmp_4_fu_96_p1;
    sc_signal< sc_lv<8> > tmp_4_reg_237;
    sc_signal< sc_lv<32> > index_fu_143_p3;
    sc_signal< sc_lv<32> > index_reg_242;
    sc_signal< sc_lv<1> > tmp_9_reg_247;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter4_tmp_9_reg_247;
    sc_signal< sc_lv<1> > icmp_fu_169_p2;
    sc_signal< sc_lv<1> > icmp_reg_253;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter4_icmp_reg_253;
    sc_signal< sc_lv<64> > tmp_1_fu_175_p1;
    sc_signal< sc_lv<22> > p_Result_2_fu_109_p3;
    sc_signal< sc_lv<25> > ret_V_cast_cast_fu_99_p1;
    sc_signal< sc_lv<25> > ret_V_fu_122_p2;
    sc_signal< sc_lv<1> > tmp_7_fu_116_p2;
    sc_signal< sc_lv<32> > tmp_6_fu_128_p1;
    sc_signal< sc_lv<32> > tmp_s_fu_131_p1;
    sc_signal< sc_lv<1> > tmp_3_fu_102_p3;
    sc_signal< sc_lv<32> > tmp_5_fu_135_p3;
    sc_signal< sc_lv<18> > tmp_10_fu_159_p4;
    sc_signal< sc_lv<1> > sel_tmp1_fu_179_p2;
    sc_signal< sc_lv<1> > sel_tmp2_fu_184_p2;
    sc_signal< sc_lv<1> > tmp_8_fu_197_p2;
    sc_signal< sc_lv<14> > sel_tmp_cast_fu_189_p3;
    sc_signal< sc_lv<9> > grp_fu_211_p0;
    sc_signal< sc_lv<24> > grp_fu_211_p2;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_pipeline_idle_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<22> ap_const_lv22_0;
    static const sc_lv<25> ap_const_lv25_1;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<18> ap_const_lv18_0;
    static const sc_lv<14> ap_const_lv14_40;
    static const sc_lv<32> ap_const_lv32_FFFFFF51;
    static const sc_lv<32> ap_const_lv32_400000;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_done();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_pipeline_idle_pp0();
    void thread_ap_ready();
    void thread_grp_fu_211_p0();
    void thread_grp_fu_211_p2();
    void thread_icmp_fu_169_p2();
    void thread_index_fu_143_p3();
    void thread_p_Result_2_fu_109_p3();
    void thread_res_V();
    void thread_res_V_ap_vld();
    void thread_ret_V_cast_cast_fu_99_p1();
    void thread_ret_V_fu_122_p2();
    void thread_rinvToPt_table1_address0();
    void thread_rinvToPt_table1_ce0();
    void thread_sel_tmp1_fu_179_p2();
    void thread_sel_tmp2_fu_184_p2();
    void thread_sel_tmp_cast_fu_189_p3();
    void thread_tmp_10_fu_159_p4();
    void thread_tmp_1_fu_175_p1();
    void thread_tmp_3_fu_102_p3();
    void thread_tmp_4_fu_96_p1();
    void thread_tmp_5_fu_135_p3();
    void thread_tmp_6_fu_128_p1();
    void thread_tmp_7_fu_116_p2();
    void thread_tmp_8_fu_197_p2();
    void thread_tmp_s_fu_131_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
